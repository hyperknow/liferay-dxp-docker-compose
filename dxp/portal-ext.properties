##
## Custom properties
##

    module.framework.properties.lpkg.index.validator.enabled=false
	module.framework.properties.initial.system.check.enabled=true
	module.framework.properties.osgi.console=0.0.0.0:11311

##
## Setup Wizard
##

    #
    # Set this property to true if the Setup Wizard should be displayed the
    # first time the portal is started.
    #
    setup.wizard.enabled=false

##
## Browser Launcher
##

    #
    # Enter a URL to automatically launch a browser to that URL when the portal
    # has fully initialized. Enter a blank URL to disable this feature.
    #
    browser.launcher.url=

##
## JDBC
##

    #
    # Set the JNDI name to lookup the JDBC data source. If none is set,
    # then the portal will attempt to create the JDBC data source based on the
    # properties prefixed with "jdbc.default.".
    #
    # jdbc.default.jndi.name=jdbc/LiferayPool
	
	#
	# MariaDB
	#
	# Env: LIFERAY_JDBC_PERIOD_DEFAULT_PERIOD_DRIVER_UPPERCASEC_LASS_UPPERCASEN_AME
	# Env: LIFERAY_JDBC_PERIOD_DEFAULT_PERIOD_PASSWORD
	# Env: LIFERAY_JDBC_PERIOD_DEFAULT_PERIOD_URL
	# Env: LIFERAY_JDBC_PERIOD_DEFAULT_PERIOD_USERNAME
	#
	jdbc.default.driverClassName=org.mariadb.jdbc.Driver
	jdbc.default.url=jdbc:mariadb://mariadb:3306/lportal?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false
	jdbc.default.username=root
	jdbc.default.password=root
		
##
## Company
##

	# company.default.name=Liferay

	#
	# This sets the default web ID. Omniadmin users must belong to the company
	# with this web ID.
	#
	# company.default.web.id=liferay.com

    #
    # This sets the default locale of the portal, overriding the properties
    # "user.language" and "user.country" specified in system.properties.
    #
    company.default.locale=en_US

    #
    # This sets the default time zone of the portal.
    #
    # company.default.time.zone=UTC-3

    #
    # Set this to true to allow users to select the "remember me" feature to
    # automatically login to the portal.
    #
    # company.security.auto.login=false

    #
    # Set this to true to allow users to ask the portal to send them their
    # password.
    #
    # company.security.send.password=false

    #
    # Set this to true to allow users to ask the portal to send them a password
    # reset link.
    #
    # company.security.send.password.reset.link=false

    #
    # Set this to true to allow strangers to create accounts and register
    # themselves on the portal.
    #
    # company.security.strangers=false

    #
    # Set this to true if strangers can create accounts with email addresses
    # that match the company mail suffix. This property is not used unless
    # "company.security.strangers" is also set to true.
    #
    # company.security.strangers.with.mx=false

    #
    # The portal can authenticate users based on their email address, screen
    # name, or user ID.
    #
    # Env: LIFERAY_COMPANY_PERIOD_SECURITY_PERIOD_AUTH_PERIOD_TYPE
    #
    # company.security.auth.type=emailAddress
    # company.security.auth.type=screenName
    # company.security.auth.type=userId

##
## Users
##

    #
    # Set this to true to enable reminder queries that are used to help reset a
    # user's password.
    #
    users.reminder.queries.enabled=false
    users.reminder.queries.custom.question.enabled=false

##
## Groups and Roles
##

    #
    # Set this to true if all users are required to agree to the terms of use.
    #
    terms.of.use.required=false
	
##
## Languages and Time Zones
##

    #
    # Specify the locales that are enabled by default.
    #
    locales.enabled=en_US,es_ES,pt_BR
	
##
## Session
##

    #
    # Set this to true to track user clicks in memory for the duration of a
    # user's session. Setting this to true allows you to view all live sessions
    # in the Admin portlet.
    #
    session.tracker.memory.enabled=false

##
## Layouts
##

    #
    # Set whether or not private layouts are enabled. Set whether or not private
    # layouts should be auto created if a user has no private layouts. If
    # private layouts are not enabled, then the property
    # "layout.user.private.layouts.auto.create" is assumed to be false.
    #
    layout.user.private.layouts.enabled=false
    layout.user.private.layouts.auto.create=false

    #
    # Set whether or not public layouts are enabled. Set whether or not public
    # layouts should be auto created if a user has no public layouts. If public
    # layouts are not enabled, then the property
    # "layout.user.public.layouts.auto.create" is assumed to be false.
    #
    layout.user.public.layouts.enabled=false
    layout.user.public.layouts.auto.create=false

##
## Hibernate
##

	#
	# Set the JDBC batch size to improve performance.
	#
	# If you're using Hypersonic, you SHOULD set the batch size to 0 as a
	# workaround for a logging bug in the Hypersonic driver. See LPS-5426 for
	# more information.
	#
	# If you're using Oracle 9i, you MUST set the batch size to 0 as a
	# workaround for a hanging bug in the Oracle driver. See LEP-1234 for more
	# information.
	#
    hibernate.jdbc.batch_size=200

##
## Buffered Increment
##
    #
    # Buffered incrementing provides logic to batch together requests for
    # writing view count increments to the database. Minimizing these database
    # hits can improve overall performance.
    #
    # Buffered incrementing only applies to service methods annotated with the
    # @BufferedIncrement(...) annotation. By default, it is used with methods
    # that increment view counters for Message Boards threads, Document Library
    # file entries, and Asset entries.
    #
    # Disabling buffered increment logic will result in the service methods
    # annotated with the @BufferedIncrement annotation being skipped. Only do
    # this if you want to completely disable the view counters.
    #
    # If you want to keep the view counters enabled but avoid using the
    # buffered increment logic, one option is to remove the
    # BufferedIncrementAdvice bean from base-spring.xml. As an alternative
    # to disabling the buffered increment logic, consider disabling its standby
    # logic by setting the "buffered.increment.standby.queue.threshold" and
    # "buffered.increment.standby.time.upper.limit" properties to 0.
    #
    buffered.increment.enabled=true
    #
    # The standby properties manage the time the dispatcher waits to process an
    # increment requests. The longer the dispatcher waits to process a request,
    # the greater the probability that incoming requests, involving the same
    # entity instances (entries), can be batched together.
    #
    # For example, if the same Message Boards thread (MBThread instance) is
    # viewed multiple times (n times) while an existing view increment request
    # for that MBThread is waiting to be dispatched, then the incoming
    # increments can be added to the increment value of the existing request.
    # The resulting view count increment for the existing entry then would be
    # modified to 1 + n times and the incoming requests would be discarded. This
    # minimizes the database hits for incrementing that entry. Since the
    # incoming requests were no longer needed, and hence discarded, the memory
    # required for incrementing the view count of the entry was minimized too.
    #
    # Worker threads submit new increment requests to a BatchablePipe and notify
    # the dispatcher thread pool of the requests. The pipe acts as a mailbox
    # holding increment requests in a queue for the dispatcher to process. On
    # receiving a new increment request, the pipe checks if it already has a
    # request for the same entry. If it does, the pipe adds the incoming
    # increment to the existing entry's increment value and discards the
    # incoming increment request. If it doesn't find an existing request for the
    # same entry, the incoming request is simply added to the tail of the queue.
    #
    # On being notified by the worker thread of increment requests submitted to
    # the BatchablePipe, the thread pool checks the status of its dispatch
    # threads. If no dispatch threads exist, it creates one. If an idle thread
    # exists, it wakes it up. If threads exist but they are all active, the
    # thread pool leaves them alone. Active dispatch threads check the pipe's
    # queue for requests to process.
    #
    # The dispatch threads apply the standby logic before processing each
    # request from the pipe. They calculate the standby time for the request at
    # the head of the pipe's queue based on the queue threshold. If the number
    # of requests in the queue exceeds the threshold, the dispatch thread
    # processes the head request as quickly as possible, without waiting. If the
    # number of requests is within the threshold, the dispatch thread calculates
    # the standby time for the head request to be the standby time upper limit
    # (in seconds) divided by the number of requests in the queue. The fewer
    # requests in the queue, the longer the head request waits on standby.
    #
    # Consider the tradeoff between overall performance and delay in view count
    # updates as you configure standby waiting. The standby times applied to
    # the requests have a linear inverse ratio relationship to the number of
    # requests in the pipe. The standby time is not constant. The fewer requests
    # inside the queue, the longer they wait in standby. This logic increases
    # the probability of maximizing the batching of requests for dispatch. The
    # following chart illustrates the relationship:
    #
    #     ^ standby time
    #     |
    #     |\<---buffered.increment.standby.time.upper.limit
    #     | \
    #     |  \
    #     |   \
    #     |    \
    #     --------------> current BatchablePipe size
    #     0 ^
    #       |
    #       buffered.increment.standby.queue.threshold
    #
    # Typical settings for the queue threshold and upper time limit of a heavy
    # loaded system could be 10000 requests and 60 seconds, respectively.
    #
    # If either the queue threshold or upper time limit are set to 0, requests
    # are processed from the queue as quickly as possible, without waiting.
    # Negative values for either property are treated as 0.
    #
    buffered.increment.standby.queue.threshold=10000
    buffered.increment.standby.time.upper.limit=60

##
## Counter
##

    #
    # Set the number of increments between database updates to the Counter
    # table. Set this value to a higher number for better performance.
    #
    counter.increment=1000
		
##
## Blogs Service
##

    #
    # Set this to true to enable pingbacks.
    #
    blogs.pingback.enabled=false

    #
    # Set this to true to enable pinging Google on new and updated blog entries.
    #
    blogs.ping.google.enabled=false

##
## Document Library Service
##

    #
    # Set the name of a class that implements
    # com.liferay.document.library.kernel.store.Store. The
    # document library server will use this to persist documents.
    #
    dl.store.impl=com.liferay.portal.store.file.system.AdvancedFileSystemStore
